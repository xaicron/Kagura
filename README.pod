=encoding utf-8

=for stopwords

=head1 NAME

Kagura - simple web application framework

=head1 SYNOPSIS

Generating new project:

  $ kagura-setup.pl MyApp

run app.psgi

  $ cd MyApp
  $ plackup MyApp.psgi

=head1 DESCRIPTION

Kagura is easy, simple, lightweight web application framework.

=head1 EXPORT FUNCTIONS

=over 4

=item B<< get($path, $code) >>

=item B<< post($path, $code) >>

=item B<< any([$method, ] $path, $code) >>

This founctions from L<< Router::Simple::Sinatraish >>.

C<< $code >> must be returned Plack::Response-like object.

  pacakge MyApp;
  use MyApp::Web;
  
  get '/' => sub {
      my ($c, $req) = @_;
      ...
      my $res = $c->response_class->new(200, [], ['Hello Kagura!!']);
      return $res;
  }
  post '/' => sub {
      my ($c, $req) = @_;
      ...
      return $res;
  }
  any '/' => sub {
      my ($c, $req) = @_;
      ...
      return $res;
  }
  any [qw/GET DELETE/], '/any' => sub {
      my ($c, $req) = @_;
      ...
  }
  
  # $c   is Kagura-like object
  # $req is Plack::Requst-like object (eq $c->req)
  # $res is Plack::Response-like object

=item B<< dispatch($contoroller, $method_name) >>

Sets dispatch rule.

into MyApp.pm

  pacakge MyApp;
  use MyApp::Web;
  
  # call MyApp::Web::C::Root::index
  get '/' => dispatch('Root', 'index');

into MyApp/Web/C/Root.pm

  package MyApp::Web::C::Root;
  
  sub index {
      my ($c, $req) = @_;
      ...
  }

=back

=head1 METHOD

=over 4

=item B<< req() >>

Get request object.

  get '/' => sub {
     my ($c, $req) = @_;
     $c->req; # eq $req
     ...
  }

=item B<< params() >>

Route parameters.

  get '/{user}' => sub {
     my ($c, $req) = @_;
     my $params = $c->params;
     ...
  }
  
  # GET http://localhost/foo
  # $params->{user} eq 'foo'

=item B<< render(@args) >>

Rendering template. Returned C<< response_class >> object.

  get '/' => sub {
     my ($c, $req) = @_;
     ...
     my $res = $c->render('index.mt');
     return $res;
  }

=item B<< model($name) >>

Get C<< MyApp::M::$name >> object.

  pacakge MyApp::M::User;
  sub find {
      my ($self, $user_id) = @_;
      ...
      return $user_name;
  }
  
  package MyApp;
  use parent 'MyApp::Web';
  get '/{user_id}' => sub {
      my ($c, $req) = @_;
      my $user_name = $c->model('User')->find($c->params->{user_id});
      ...
  }

=item B<< return_404() >>

Returned status 404.

  get '/404' => sub {
     my ($c, $req) = @_;
     return $c->return_404();
  }

=item B<< return_403() >>

Returned status 403.

  get '/403' => sub {
     my ($c, $req) = @_;
     return $c->return_403();
  }

=item B<< show_error() >>

Returned status 500.

  get '/error' => sub {
     my ($c, $req) = @_;
     return $c->show_error('oops!!');
  }

=item B<< stash([$hashref]) >>

You can use freely.

=back

=head1 CLASS METHOD

=over 4

=item B<< to_app() >>

into app.psgi

  use MyApp;
  MyApp->to_app;

=item B<< init() >>

Init application. This method in to_app() called.

=item B<< init_prepare() >>

Call prepare init() method. This method is in inii() called.

You can overwridet this method.

  pacakge MyApp::Web;
  use parent 'Kagura';
  
  sub init_prepare {
      my ($class) = @_;
      ...
  }

=item B<< init_finalize() >>

Call finalize init() method. This method is in inii() called.

You can overwridet this method.

  pacakge MyApp::Web;
  use parent 'Kagura';
  
  sub init_finalize {
      my ($class) = @_;
      ...
  }

=item B<< load_plugin($class [, $config]) >>

Load plugin class. this method must be calling in init_finalzie() or after init().

  package MyApp::Web;
  use parent 'Kagura'
  
  sub init_finalize {
      my ($class) = @_;
      $class->load_plugin('Web::JSON');
      $class->load_plugin('+MyApp::Plugin::Foo', +{ bar => 'baz' });
  }

=item B<< load_plugins(%args) >>

Load plugins.

  package MyApp::Web;
  use parent 'Kagura';
  
  sub init_finalize {
      my ($class) = @_;
      $class->load_plugins(
        'Web::JSON'           => {},
        '+MyApp::Plugin::Foo' => +{ bar => 'baz' }
      );
  }

or configuration:

  # conf/developlemt.pl
  +{
      plugin => +{
          'Web::JSON'           => +{},
          '+MyApp::Plugin::Foo' => +{ bar => 'baz' },
      },
  }

=back

=head1 DEFAULT CLASS ACCESSOR METHOD

These methods you can calling the after init().

=over 4

=item B<< config([$hash_ref]) >>

Loaded configuration from C<< conf/$ENV{PLACK_ENV}.pl >>

=item B<< home_dir([$home_dir]) >>

Sets value must be L<< Path::Class >>-like object.

=item B<< renderer([$renderer]) >>

Sets value must be L<< Tiffany >>::* object.

=item B<< container([$scalar] >>

Default 'Object::Container'

=item B<< request_class([$scalar]) >>

Default 'Plack::Request'

=item B<< response_class([$scalar]) >>

Default 'Plack::Response'

=back

=head1 AUTHOR

xaicron E<lt>xaicron {at} cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2011 - xaicron

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO


=cut

